empty
program -> declaration_list
declaration_list -> declaration declaration_list'
declaration_list' -> declaration declaration_list' | empty
declaration -> type_specifier ID declaration'
declaration' -> ; | [ NUM ] ; | ( params ) compound_stmt
var_declaration -> type_specifier ID var_declaration'
var_declaration' -> ; | [ NUM ] ;
type_specifier -> int | void
params -> void params' | int ID param' param_list'
params' -> ID param' param_list' | empty
param_list' -> , param param_list' | empty
param -> type_specifier ID param'
param' -> [ ] | empty
compound_stmt -> { local_declarations statement_list }
local_declarations -> local_declarations'
local_declarations' -> var_declaration local_declarations' | empty
statement_list -> statement_list'
statement_list' -> statement statement_list' | empty
statement -> expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt
expression_stmt -> expression ; | ;
selection_stmt -> if ( expression ) statement selection_stmt'
selection_stmt' -> else statement | empty
iteration_stmt -> while ( expression ) statement
return_stmt -> return return_stmt'
return_stmt' -> ; | expression ;
expression -> ID expression' | ( expression ) term' additive_expression' simple_expression' | NUM term' additive_expression' simple_expression'
expression' -> var' expression'' | ( args ) term' additive_expression' simple_expression'
expression'' -> = expression | term' additive_expression' simple_expression'
var' -> [ expression ] | empty
simple_expression' -> relop additive_expression | empty
relop -> <= | < | > | >= | == | !=
additive_expression -> term additive_expression'
additive_expression' -> addop term additive_expression' | empty
addop -> + | -
term -> factor term'
term' -> mulop factor term' | empty
mulop -> * | /
factor -> ID factor' | ( expression ) | NUM
factor' -> [ expression ] | ( args ) | empty
args -> arg_list | empty
arg_list -> expression arg_list'
arg_list' -> , expression arg_list' | empty